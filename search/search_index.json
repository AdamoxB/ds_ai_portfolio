{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home Page","text":"WEBSITE UNDER CONSTRUCTION !"},{"location":"#project-from-the-world-of-data-and-artificial-intelligence","title":"Project from the world of data and artificial intelligence","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the page dedicated to projects in data analysis, machine learning, and artificial intelligence. Here you\u2019ll find projects I\u2019ve been working on recently.</p> <p>Feel free to explore\u2014hope you discover something interesting here!</p>"},{"location":"#my-short-story","title":"My short story","text":"<p>In 2011, I earned a Master of Science in Engineering from the Faculty of Electrical Engineering at Warsaw University of Technology. My studies ignited my interest in new technologies.</p> <p>Over the past three years, I worked as a designer of electrical networks using AutoCAD; later I served as Senior Product Manager for lighting systems and then spent ten years in two companies as a Lighting\u2011Systems Designer where I honed skills in automating design processes.</p> <p>In 2025 I was inspired by the data industry, the role of Data Scientist, and the rapidly evolving field of artificial intelligence. An opportunity arose to further develop these skills by creating AI agents\u2014automation that is not deterministic but can adapt far better to various process\u2011automation tasks, thereby reducing verification time and increasing overall efficiency.</p>"},{"location":"#contact","title":"Contact","text":"<p>Adam Biela email: bielaa3@gmail.com tel: +48 506 767 998</p>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/","title":"Index","text":"<p>import streamlit as st import pandas as pd import numpy as np from pycaret.datasets import get_data from pycaret.classification import setup as cl_setup, compare_models as cl_compare_models, create_model as cl_create_model, plot_model as cl_plot_model, finalize_model as cl_finalize_model, save_model as cl_finalize_model, load_model as cl_load_model, predict_model as cl_predict_model, pull, ClassificationExperiment from pycaret.regression import setup as re_setup, compare_models as re_compare_models, create_model as re_create_model, plot_model as re_plot_model, finalize_model as re_finalize_model, save_model as re_save_model, load_model as re_load_model, predict_model as re_predict_model, pull import matplotlib.pyplot as plt from sklearn.metrics import confusion_matrix import seaborn as sns import os import io import shutil import time from pycaret.time_series import TSForecastingExperiment#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! st.set_page_config(layout='wide')</p>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#funkcja-do-wczytania-danych","title":"Funkcja do wczytania danych","text":"<p>def load_data(uploaded_file, sep):     if uploaded_file is not None:         if uploaded_file.name.endswith('.csv'):             return pd.read_csv(uploaded_file, sep=sep)         elif uploaded_file.name.endswith('.json'):             return pd.read_json(uploaded_file)         elif uploaded_file.name.endswith('.xls') or uploaded_file.name.endswith('.xlsx'):             return pd.read_excel(uploaded_file)     return None</p>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#import-streamlit-as-st","title":"import streamlit as st","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#import-matplotlibpyplot-as-plt","title":"import matplotlib.pyplot as plt","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#import-io","title":"import io","text":"<p>def toss(model, plot_type, session_key):     # Tworzenie wykresu     fig, ax = plt.subplots()     cl_plot_model(model, plot=plot_type, display_format=\"streamlit\")</p> <pre><code># Zapisywanie wykresu do BytesIO\nbuf = io.BytesIO()\nplt.savefig(buf, format='png')\nbuf.seek(0)\nst.session_state[session_key] = buf.getvalue()\n\n# Wy\u015bwietlanie wykresu z session_state\nif session_key in st.session_state:\n    st.image(st.session_state[session_key])\n</code></pre>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#przykad-uzycia","title":"Przyk\u0142ad u\u017cycia","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#tosscl_best_model-plotconfusion_matrix-session_keyconfusion_matrix","title":"toss(cl_best_model, plot='confusion_matrix', session_key='confusion_matrix')","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_1","title":"==========================================================================================","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#strona-gowna","title":"Strona g\u0142\u00f3wna","text":"<p>st.title(\"Analiza Kluczowych Cech w Zbiorach Danych\")</p>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#sidebar","title":"Sidebar","text":"<p>st.sidebar.title(\"Opcje\") uploaded_file = st.sidebar.file_uploader(\"1. Wybierz plik\", type=[\"csv\", \"json\", \"xls\", \"xlsx\"])</p>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#sep-stsidebarselectboxwybierz-separator-tab-spacja-t","title":"sep = st.sidebar.selectbox(\"Wybierz separator, / ; / tab /spacja\", [\",\", \";\", \"\\t\", \" \"])","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#if-stsidebarselectboxif-f","title":"if st.sidebar.selectbox(\"I:\",[\"f\"]) == \"f\"","text":"<p>with st.sidebar:     #st.text_input.annotations     col1, col2 = st.columns(2)     with col1:         tab = st.radio(\"przecinek/tabulacja:\", [\",\", \"  \"])     with col2:         sep = st.text_input(\"Podaj w\u0142asny separator\", tab)</p> <pre><code>#sep = st.sidebar.selectbox(\"Wybierz z listy typ separatora u\u017cytego w pliku\", [\",\", \":\",st.text_input(\"dodaj do listy dowolny separator\")])\n</code></pre>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#expand-stexpandermy-label-iconmaterialinfo","title":"expand = st.expander(\"My label\", icon=\":material/info:\")","text":"<pre><code>nrproc = st.number_input(\"Ile procent losowego dataframe wzi\u0105\u0107 do analizy\", 0, 100, 100)\nst.metric(\"My metric\", 42, 2)\n</code></pre> <p>st.radio(\"Pick one\", [\"cats\", \"dogs\"]) st.radio(\"Select one:\", [1, 2])</p>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#-","title":"-----------------------------------------------------------------------------------------------------","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#__________________","title":"__________________","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_2","title":"#==========================================================================================================================================","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#y-get_dataairline-verbosefalse","title":"y = get_data('airline', verbose=False)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#experiment","title":"# Experiment","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#exp-tsforecastingexperiment","title":"exp = TSForecastingExperiment()","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#expsetupdatay-fh12-verbosefalse","title":"exp.setup(data=y, fh=12, verbose=False)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#if-stbuttonrun-time-series-models","title":"if st.button(\"Run Time series models:\"):","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#best_model-expcompare_modelsincludearimaexp_smoothets-verbosefalse","title":"best_model = exp.compare_models(include=['arima','exp_smooth','ets'], verbose=False)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#pull-metrics","title":"#Pull metrics","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#metrics-exppull","title":"metrics = exp.pull()","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#stwritemetrics","title":"st.write(metrics)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#plot-graph","title":"# Plot graph","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#stwritefoto-tabelka","title":"st.write(f\"Oto tabelka\")","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#expplot_modelestimatorbest_model-display_formatstreamlit","title":"exp.plot_model(estimator=best_model, display_format='streamlit')","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_3","title":"#==========================================================================================================================================","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#tab1-tab2-sttabs1-2","title":"tab1, tab2 = st.tabs([1, 2])","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#tab1-tab2-sttabstab-1-tab2","title":"tab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#with-tab1","title":"with tab1:","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#stwritethis-is-tab-1","title":"st.write(\"this is tab 1\")","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#tab2writethis-is-tab-2","title":"tab2.write(\"this is tab 2\")","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#n_rows_first-stsidebarnumber_inputile-pierwszych-wierszy-do-analizy-min_value1-max_value100-value10","title":"n_rows_first = st.sidebar.number_input(\"Ile pierwszych wierszy do analizy?\", min_value=1, max_value=100, value=10)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#n_rows_random-stsidebarnumber_inputile-losowych-wierszy-do-analizy-min_value1-max_value100-value10","title":"n_rows_random = st.sidebar.number_input(\"Ile losowych wierszy do analizy?\", min_value=1, max_value=100, value=10)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#stwriteoto-pierwsze-5-losowych-wierszy-z-pliku","title":"st.write(\"Oto pierwsze 5 losowych wierszy z pliku:\")","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#stwritedfsample5","title":"st.write(df.sample(5))","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#logika-aplikacji","title":"Logika aplikacji","text":"<p>if uploaded_file:      df = load_data(uploaded_file, sep)</p> <pre><code>nr=nrproc#ile % data frame frame do trenowania\nmin_df  = df.sample(round((nr/100)*len(df)))\n\ncolumns_to_ignore = st.multiselect('Ignorowane Kolumny', df.columns.tolist())\nif df is not None:\n\n    if len(df.columns)&lt;2:\n        st.warning('Ustaw seprator!')\n        # st.write(df.sample(2))\n    else:\n        st.info('Ustawi\u0142e\u015b separator poprawnie :)')\n        # st.write(df.sample(2))\n        #2. wyb\u00f3r kolumny\n        kolumna1 = st.sidebar.selectbox('[ 2 ] Wybierz badan\u0105 kolumn\u0119 odniesienia ', df.columns)#options=[]).tolist()\n        st.markdown(f\"&lt;span style='color: #007BFF;'&gt;Za\u0142adowa\u0142e\u015b plik &lt;strong style='font-size: 20px;'&gt;{uploaded_file.name}&lt;/strong&gt;, wybra\u0142e\u015b kolumn\u0119 &lt;strong style='font-size: 20px;'&gt;{kolumna1}&lt;/strong&gt;wybrany przez ciebie serparator &lt;strong style='font-size: 20px;'&gt;[ {sep} ]&lt;/strong&gt; umo\u017cliwiia ponmi\u017csz\u0105 identyfikacje kolumn&lt;/span&gt;\", unsafe_allow_html=True)\n\n        def problem_type(df):\n            if df.select_dtypes(include='object').shape[1] &gt; 0:#weryfikacji obecno\u015bci kolumn tekstowych w DataFrame\n                return \"Klasyfikacja\"\n            else:\n                return \"Regresja\"\n        info = problem_type(df)\n        st.write(f\"Typ problemu: {info}\")\n\n\n\n        tab1, tab2, tab3 = st.tabs([\"losowe wiersze\", \"Brakuj\u0105ce dane\", f\"Setup : {info}\"])\n\n        with tab1:\n            st.header(\"losowe wiersze\")\n            with st.expander(f\"&gt;Oto 10 losowych wierszy\"):\n                # st.markdown(f\"&lt;span style='color: #28A745;'&gt;Oto pierwsze 10 losowych wierszy z po\u015br\u00f3d &lt;strong style='font-size: 20px;'&gt;{len(min_df)}&lt;/strong&gt; wierszy i &lt;strong style='font-size: 20px;'&gt;{len(min_df.columns)}&lt;/strong&gt; kolumn wczytanych danych&lt;/span&gt;\", unsafe_allow_html=True)\n                st.dataframe(min_df.sample(10))\n\n        with tab2:\n            # with st.expander(\"Brakuj\u0105ce dane w %\"):\n            #     st.write(df.isna().sum() / len(df) * 100) \n            taba, tabb = st.tabs([\"Brakuj\u0105ce dane w %\", \"typy danych w kolumnach\"])\n            with taba:\n                with st.expander(\"Brakuj\u0105ce dane w %\"):\n                    st.write(min_df.isna().sum() / len(min_df) * 100) \n            with tabb:\n                buffer = pd.io.common.StringIO()\n                min_df.info(buf=buffer)\n                s = buffer.getvalue()\n\n                st.text(s)  # Wy\u015bwietl zawarto\u015b\u0107 df.info()\n                st.text(f\"----------------------------------------------------------\") \n                st.write(f\"unikatowe warto\u015bci :\") \n                st.write(min_df.nunique()) \n                st.write(min_df.describe().round(2).T)\n        with tab3:\n            # nr=nrproc#ile % data frame frame do trenowania\n            # min_df  = df.sample(round((nr/100)*len(df)))\n            cl_setup(\n                data=min_df,\n                target=kolumna1,\n                session_id=123,\n                ignore_features=columns_to_ignore,#['Name', 'Ticket', 'Cabin', 'PassengerId'],\n                fix_imbalance=True,\n                normalize=True,\n                transformation=True,\n                verbose=False,\n            )\n</code></pre>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_4","title":"===========================================================================================","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_5","title":"================","text":"<pre><code>            # titanic_df = get_data('titanic', verbose=False)\n            # Experiment\n            exp = ClassificationExperiment()\n            exp.setup(\n                data=min_df,\n                target=kolumna1,\n                session_id=123,\n                ignore_features=columns_to_ignore,#['Name', 'Ticket', 'Cabin', 'PassengerId'],\n                fix_imbalance=True,\n                normalize=True,\n                transformation=True,\n                verbose=False,\n            )\n            if 'metrics' not in st.session_state:\n                st.session_state.metrics = None\n\n            wybor = {\n                \"kompleksowy\": {},\n                \"szybki okrojony\": {'include': ['rf', 'lr', 'gbc', 'knn'], 'fold': 5, 'verbose': False}\n            }\n\n            conf_compare = st.radio(\"zakres por\u00f3wnanania modeli \", list(wybor.keys()))\n            if st.button(\"Run Time series models:\"):\n\n                cl_best_model = exp.compare_models(**wybor[conf_compare])##include=['arima','exp_smooth','ets'], verbose=False\n                #Pull metrics\n\n                st.session_state.cl_best_model = cl_best_model\n\n\n\n                metrics = exp.pull()\n\n                # Przechowanie metryk w session_state\n\n\n                st.session_state.metrics = metrics\n\n                # Wy\u015bwietlenie metryk &lt;&lt;&lt;&lt;&lt; print\n                st.write(st.session_state.metrics)\n\n                # kasuj stare pliki na dysku\n                file_names = ['Feature Importance.png', 'Confusion Matrix.png', 'AUC.png']\n\n                for file_name in file_names:\n                    try:\n                        os.remove(file_name)\n                        print(f\"Usuni\u0119to: {file_name}\")\n                    except FileNotFoundError:\n                        print(f\"Plik nie znaleziony: {file_name}\")\n                    except Exception as e:\n                        print(f\"Zdarzy\u0142 si\u0119 b\u0142\u0105d przy usuwaniu pliku {file_name}: {e}\")\n                #st.write(metrics)#st.write &lt;&lt;&lt;&lt;&lt; print\n                # Plot graph\n                # if hasattr(cl_best_model, 'auc'):\n                #     exp.plot_model(estimator=cl_best_model, display_format='streamlit')#&lt;&lt;&lt;&lt;, display_format='streamlit')\n                # else:\n                #     st.error('Wygenerowanie wykresu nie jest mo\u017cliwe.')\n                if hasattr(cl_best_model, 'coef_') or hasattr(cl_best_model, 'feature_importances_'):\n\n                    cl_plot_model(cl_best_model, plot='feature', display_format=\"streamlit\", save=True)\n                    cl_FL_plot_name = 'Feature Importance.png'\n                    st.image('Feature Importance.png', use_container_width=True)\n                else:\n                    st.error(\n                'Wygenerowanie wykresu istotno\u015bci cech NIE jest mo\u017cliwe dla tej kolumny. Zmie\u0144 kolumn\u0119 docelow\u0105.')\n                cl_plot_model(cl_best_model, plot='confusion_matrix', display_format=\"streamlit\")\n                cl_plot_model(cl_best_model, plot='confusion_matrix', save=True)\n                cl_CM_plot_name = 'Confusion Matrix.png'\n\n                cl_plot_model(cl_best_model, plot='auc', display_format=\"streamlit\")\n                cl_plot_model(cl_best_model, plot='auc', display_format=\"streamlit\", save=True)\n                cl_FL_plot_name = 'ROC.png'\n\n                # toss(cl_best_model, plot='confusion_matrix', session_key='confusion_matrix')\n</code></pre>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_6","title":"===========================================================================================","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_7","title":"===========================================================================================","text":"<pre><code>            # #==========================================================================================================================================\n            # # y = get_data('airline', verbose=False)\n            # # Experiment\n            # exp = TSForecastingExperiment()\n            # exp.setup(data=df, fh=12, target=kolumna1, session_id=123, verbose=False)#min_df fh=12,\n\n            # if st.button(\"Run Time series models:\"):\n            #     best_model = exp.compare_models(include=['lr','rf','gbc'], verbose=False)#include=['arima', 'exp_smooth','ets'], \n            #     #Pull metrics\n            #     metrics = exp.pull()\n            #     st.write(metrics)\n\n            #     # Plot graph\n            #     st.write(f\"Oto tabelka\") \n            #     exp.plot_model(estimator=best_model, display_format='streamlit')\n            # #==========================================================================================================================================\n\n\n            tabx, taby = st.tabs([f\"Setup : {info}\", \"ostatni best model\"])\n\n            with taby:\n\n                if st.button(\"Zapisz modele\"):\n                    file_names = ['Feature Importance.png', 'Confusion Matrix.png', 'AUC.png']\n                    for file_name in file_names:\n                        if os.path.exists(file_name):\n                            new_file_name = file_name.replace('.png', '{info}_saved.png')\n                            shutil.copy(file_name, new_file_name)\n                        else:\n                            st.warning(f'Brak pliku: {file_name}')\n\n                if st.button(\"wczytaj modele\"):                      \n                    st.write(st.session_state.metrics)\n                    file_names = ['Feature Importance_saved.png', 'Confusion Matrix_saved.png', 'AUC_saved.png']\n                    for file_name in file_names:\n                        if os.path.exists(file_name):\n                            st.image(file_name, use_container_width=True)\n                        else:\n                            st.warning(f'Brak pliku do wy\u015bwietlenia : {file_name}')\n\n\n\n\n                # st.image('Feature Importance.png', use_container_width=True)\n                # st.image('Confusion Matrix.png', use_container_width=True)\n                # st.image('ROC.png', use_container_width=True)\n</code></pre>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_8","title":"==============================================================================================================","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#_9","title":"==============================================================================================================","text":"<pre><code>                    # exp=TSForecastingExperiment()\n                    # exp.cl_setup(data=min_df, fh=12, target=kolumna1, session_id=123, html=False)\n\n                    # if st.button(\"Run Time series models:\"):\n                    #     # best = exp.compare_models(include=['arima','exp_smooth','ets'], verbose=False)\n\n                    #     best_model = exp.compare_models(verbose=False)\n                    #     # Pull metrics\n                    #     metrics = exp.pull()\n                    #     st.write(metrics)\n\n                    #     # Plot graph\n                    #     exp.plot_model(estimator=best_model, display_format='streamlit')\n\n\n\n\n\n\n\n\n                    # best_model = cl_compare_models(fold=5)\n                    # classification_results = pull()\n                    # st.write(classification_results )\n\n\n\n                    # img = cl_plot_model(best_model, plot=\"feature\", display_format=\"streamlit\", save=True)#!!!!!!!!!!!!!!!!!!!\n                    # st.image(img)#!!!!!!!!!!!!!!!!!!!!\n\n\n                    # def pulla():\n                    #     # Dummy example function; replace with actual implementation\n                    #     return best_model  # or it could be any data type\n\n                    # # Get the results from pull()\n                    # results = pulla()\n\n                    # data = results.to_dict(orient='records')\n                    # df_bm = pd.DataFrame(data)\n                    # df_bm\n                    # st.write(\"Results:\", df_bm)\n                    # Display the results using Streamlit's write function\n\n\n\n\n                        # best_model\n                        # st.write(\"Results:\", best_model)\n\n\n\n\n\n\n\n                    # # results = pull()  # Pobiera wyniki z compare_models\n                    # # results.reset_index()#drop=True, inplace=True)\n\n\n                    # clf = cl_setup(data=min_df, target=kolumna1, session_id=123, html=False)\n                    # # st.write(f\"Setup : {info}, wybrana kolumna : {kolumna1}\")\n\n                    # # st.title(\"Por\u00f3wnanie modeli\")\n                    # cl_best_model = cl_compare_models()#(include=['lr', 'rf'], fold=5)\n                    # with st.spinner('Czekam...'):\n                    #     time.sleep(1)  # Symulacja d\u0142ugiego procesu\n                    # results\n                    # # results = pull()  # Pobiera wyniki z compare_models\n                    # st.success('Gotowe!')\n\n                    # cl_best_model  \n                    # st.write(f\"Najlepszy model: {cl_best_model}\")\n                    # # st.title(\"Por\u00f3wnanie modeli\")\n\n\n\n\n\n                    # st.dataframe(cl_best_model)\n                    # # results.reset_index()#drop=True, inplace=True)\n                    # # display(results)\n\n            with tabx:                    \n                st.header(\"losowe wiersze\")\n                st.write(f\"Setup : {info}, wybrana kolumna : {kolumna1}\") \n                min_df1 = df.sample(round((nr/100)*len(df)))\n                st.write(f\"wierszy {(len(min_df1))} z {(len(df))}\")\n\n                smodel = st.text_input(\"Podaj w\u0142asny separator\", \"lr\")\n                cl_best_model = cl_compare_models(include=[smodel], fold=10)\n                if st.button(\"Analizuj dane\"):  \n                    min_df = df.sample(round((nr/100)*len(df)))\n                    with st.expander(\"wy\u015bfietl dane\"):\n\n                        st.dataframe(min_df)#WYBRANY DF\n\n\n\n\n                    #st.write(kolumna1)\n                    #cl_best_model = st.session_state.cl_best_model\n                    #cl_setup(data=min_df, target=kolumna1, session_id=123, html=False)#,ignore_features=['Name', 'Ticket', 'Cabin', 'PassengerId']#           fix_imbalance=True,normalize=True,transformation=True,)\n                    #cl_best_model = cl_compare_models(include=['lr','rf','gbc'], verbose=True)#\n                    #cl_best_model = cl_create_model('rf')#,'rf')\n                    # cl_plot_model(cl_best_model, plot=\"feature\")\n\n                    #best_model = cl_load_model('best_model')  # Upewnij si\u0119, \u017ce masz model zapisany jako 'best_model'\n\n                    # st.dataframe(cl_best_model)\n\n                    # sprawdzenie czy znaleziony BEST MODEL posiada mo\u017cliwo\u015b\u0107 generowania wykresu funkcji\n\n\n                    # Umo\u017cliw u\u017cytkownikowi wprowadzenie nazwy modelu\n                # model_name = st.text_input(\"Wprowad\u017a nazw\u0119 modelu do wykresu:\", value=\"model_name\")\n\n                # if model_name:\n                #     try:\n                #         # Wy\u015bwietl wykres dla wybranego modelu\n                #         cl_plot_model(cl_best_model, model=model_name)\n                #     except ValueError:\n                #         st.error(\"Podano nieprawid\u0142ow\u0105 nazw\u0119 modelu. Upewnij si\u0119, \u017ce model istnieje.\")\n\n\n\n                if hasattr(cl_best_model, 'coef_') or hasattr(cl_best_model, 'feature_importances_'):\n\n                    cl_plot_model(cl_best_model, plot='feature', display_format=\"streamlit\", save=True)\n                    # Dodatkowy krok, aby zapisa\u0107 jako .png\n\n\n\n\n                    cl_generated_plot_name = 'Feature Importance.png'\n                    st.image('Feature Importance.png', use_container_width=True)\n                else:\n                    st.error(\n                    'Wygenerowanie wykresu istotno\u015bci cech NIE jest mo\u017cliwe dla tej kolumny. Zmie\u0144 kolumn\u0119 docelow\u0105.')\n\n                cl_plot_model(cl_best_model, plot='confusion_matrix', display_format=\"streamlit\")\n                cl_plot_model(cl_best_model, plot='auc', display_format=\"streamlit\")\n\n\n                                # cls_plot_image = st.image(cls_new_plot_name, use_container_width=True)\n\n                            # #     if cls_plot_image:\n                            # #         st.markdown('#### Opis wykresu:')\n                            # #         cls_description = describe_plot(cls_new_plot_name)\n\n                            # #         # wy\u015bwietlenie opisu wykresu\n                            # #         st.write(cls_description)\n\n                            # #         # rekomendacje dla klienta\n                            # #         if cls_description:\n                            # #             st.markdown('#### &lt;span style=\"color: green;\"&gt;Rekomendacje:&lt;/span&gt;', unsafe_allow_html=True)\n                            # #             st.write(generate_recommendations(cls_description))\n\n\n\n\n                    # #   Og\u00f3lny przegl\u0105d danych\n\n                    # df[\"pclass\"].value_counts()#ile razy wyst\u0119puje dana warto\u015b\u0107 w kolumnie\n\n                ### 1.3.  Podstawowe statystyki opisowe\n\n\n\n\n\n\n                # # Wy\u015bwietl informacje o typie problemu\n                # if target_column:\n                #     is_classification = df[target_column].dtype in ['object', 'category']\n                #     problem_type = \"Klasyfikacja\" if is_classification else \"Regresja\"\n                #     st.write(f\"Rozpoznany problem: {problem_type}\")\n\n                #     # # Wyb\u00f3r wierszy do analizy\n                #     # data_to_analyze = pd.concat([df.head(n_rows_first), df.sample(n_rows_random)])\n                #     # experiment = setup(data=data_to_analyze, target=target_column, silent=True, verbose=False)\n                #     best_model = compare_models()\n\n                #     # Generuj wykres najwa\u017cniejszych cech\n                #     feature_importance = plot_model(best_model, plot='feature')\n                #     plt.title('Wa\u017cno\u015b\u0107 Cech')\n                #     st.pyplot()\n\n                #     # Opis s\u0142owny modelu\n                #     model_description = f\"Zbudowany model: {best_model}. \"\n                #     st.write(model_description)\n\n                #     # Rekommendacje\n                #     recommendations = \"Rozwa\u017c dodanie wi\u0119cej danych lub przemy\u015blenie in\u017cynierii cech.\"\n                #     st.write(\"Rekomendacje:\", recommendations)\n</code></pre>"},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#uniwersalne-zestawy-kolorow-dla-czarnego-i-biaego-ta","title":"Uniwersalne zestawy kolor\u00f3w dla czarnego i bia\u0142ego t\u0142a:","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#niebieski-007bff-sredni-niebieski","title":"Niebieski: #007BFF (\u015bredni niebieski)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#zielony-28a745-zywy-zielony","title":"Zielony: #28A745 (\u017cywy zielony)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#czerwony-dc3545-intensywny-czerwony","title":"Czerwony: #DC3545 (intensywny czerwony)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#zoty-ffc107-soneczny-zoty","title":"\u017b\u00f3\u0142ty: #FFC107 (s\u0142oneczny \u017c\u00f3\u0142ty)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#fioletowy-6f42c1-geboki-fiolet","title":"Fioletowy: #6F42C1 (g\u0142\u0119boki fiolet)","text":""},{"location":"Analiza_Kluczowych_Cech_w_Zbiorach_Danych/#te-kolory-powinny-dobrze-wygladac-zarowno-na-czarnym-jak-i-biaym-tle","title":"Te kolory powinny dobrze wygl\u0105da\u0107 zar\u00f3wno na czarnym, jak i bia\u0142ym tle.","text":""},{"location":"Data_Explorer%E2%80%93PyCaret/","title":"Streamlit Data Explorer \u2013 PyCaret + ydata\u2011profiling","text":""},{"location":"Data_Explorer%E2%80%93PyCaret/#streamlit-data-explorer-pycaret-ydataprofiling","title":"Streamlit Data Explorer \u2013 PyCaret + ydata\u2011profiling","text":""},{"location":"Data_Explorer%E2%80%93PyCaret/#overview","title":"Overview","text":"<p>A lightweight Streamlit app that lets users load built-in or custom datasets and generate interactive data profiling reports using PyCaret and ydata\u2011profiling.</p>"},{"location":"Data_Explorer%E2%80%93PyCaret/#main-functionalities","title":"Main functionalities","text":"<ul> <li>Select a dataset from the list of built\u2011in PyCaret datasets via sidebar.</li> <li>Upload CSV / Excel files for analysis.</li> <li>Preview the first rows of the selected dataset.</li> <li>Generate an interactive profiling report with ydata\u2011profiling.</li> <li>Export the report as HTML or PDF (PDF conversion uses pdfkit/wkhtmltopdf).</li> <li>Dark themed UI and responsive layout.</li> </ul>"},{"location":"Data_Explorer%E2%80%93PyCaret/#technologies-skills","title":"Technologies &amp; skills","text":"<ul> <li>Python</li> <li>Streamlit</li> <li>Pandas</li> <li>PyCaret datasets</li> <li>ydata\u2011profiling</li> <li>streamlit\u2011pandas\u2011profiling</li> <li>pdfkit / wkhtmltopdf (optional)</li> </ul>"},{"location":"Data_Explorer%E2%80%93PyCaret/#project-report","title":"Project Report","text":"<ul> <li>Profiling report generation and export functionality.</li> <li>User-friendly interface for data exploration.</li> </ul>"},{"location":"Data_Explorer%E2%80%93PyCaret/#sample-photos","title":"Sample photos","text":"<p>Application usage - Run the app locally with <code>streamlit run app.py</code>. - Use the sidebar to choose a dataset or upload your own file. - Click \"Generate Profiling Report\" to view and download the report.</p>"},{"location":"Data_Explorer%E2%80%93PyCaret/#go-to-the-application","title":"Go to the application","text":""},{"location":"Gapmind_Data_Dashboard/","title":"Gapmind_Data_Dashboard","text":""},{"location":"Gapmind_Data_Dashboard/#gapmind-data-dashboard","title":"Gapmind Data Dashboard","text":""},{"location":"Gapmind_Data_Dashboard/#overview","title":"Overview","text":"<p>Interactive dashboard that visualizes the Gapminder dataset using Streamlit and Plotly Express.</p>"},{"location":"Gapmind_Data_Dashboard/#main-functionalities","title":"Main functionalities","text":"<ul> <li>Year selector slider to choose the analysis year.</li> <li>Continent multiselect filter for country selection.</li> <li>X\u2011axis and Y\u2011axis metric selectors for scatter plots.</li> <li>Toggle for logarithmic scaling of the X\u2011axis.</li> <li>Country multiselect for time\u2011series line charts.</li> <li>Reset filters button to restore defaults.</li> <li>Scatter plot visualizing GDP per capita, life expectancy, or population across continents.</li> <li>Line chart showing selected metrics over time for chosen countries.</li> <li>Bar chart displaying top\u202fN countries by a chosen metric in the selected year.</li> <li>World choropleth map coloring countries by the selected metric.</li> <li>Data table view of the filtered dataset with CSV download capability.</li> </ul>"},{"location":"Gapmind_Data_Dashboard/#technologies-skills","title":"Technologies &amp; skills","text":"<ul> <li>Python</li> <li>Streamlit</li> <li>Plotly Express</li> <li>Pandas</li> </ul>"},{"location":"Gapmind_Data_Dashboard/#project-report","title":"Project Report","text":"<p>-</p>"},{"location":"Gapmind_Data_Dashboard/#sample-photos","title":"Sample photos","text":"Gapminder Scatter Plot Gapminder Line Chart Gapminder Bar Chart"},{"location":"Gapmind_Data_Dashboard/#application-usage","title":"Application usage","text":"<p>Przejd\u017a do aplikacji</p>"},{"location":"My_Chat_GPT/","title":"My Chat GPT","text":""},{"location":"My_Chat_GPT/#my-chat-gpt","title":"My Chat GPT","text":""},{"location":"My_Chat_GPT/#overview","title":"Overview","text":"<p>A Streamlit web application that provides an interactive chat interface with OpenAI GPT models, supporting memory management, cost tracking, and persistent conversation storage.</p>"},{"location":"My_Chat_GPT/#main-functionalities","title":"Main functionalities","text":"<ul> <li>Interactive chat interface using Streamlit.  </li> <li>Selection of conversation memory size to control context length.  </li> <li>Choice of GPT model from a predefined set with pricing.  </li> <li>Role selection for the chatbot (assistant, developer, system).  </li> <li>Persistent storage of conversations as JSON files on local disk.  </li> <li>Customizable chatbot personality via text area.  </li> <li>Real\u2011time cost calculation in USD and PLN based on token usage.  </li> <li>Display of current USD/PLN exchange rate fetched from an API.  </li> <li>Ability to create new conversations or switch between existing ones.  </li> <li>Help section with step\u2011by\u2011step tips for using ChatGPT to build Python programs.</li> </ul>"},{"location":"My_Chat_GPT/#technologies-skills","title":"Technologies &amp; skills","text":"<ul> <li>Python  </li> <li>Streamlit  </li> <li>OpenAI API (openai library)  </li> <li>dotenv  </li> <li>requests  </li> <li>pathlib / json  </li> </ul>"},{"location":"My_Chat_GPT/#project-report","title":"Project Report","text":"<ul> <li>Completed functional chat application with persistent storage and cost tracking.</li> </ul>"},{"location":"My_Chat_GPT/#sample-photos","title":"Sample photos","text":"Two ways of entering API_KEY Model_chose Chat_role Chat memory &amp; Tips"},{"location":"My_Chat_GPT/#application-usage","title":"Application usage","text":"<ul> <li>Open the Streamlit app in a browser.    </li> <li>Configure conversation memory, model, and role in the sidebar.  </li> <li>Enter prompts into the chat input to interact with GPT.  </li> <li>Monitor cost metrics (USD/PLN) on the sidebar.  </li> <li>Manage conversations: rename, create new, load existing.</li> </ul>"},{"location":"My_Chat_GPT/#where-to-get-api-key-and-addresses","title":"Where to get API key and addresses?","text":"<ol> <li>OpenAI API Key (openai_api_key): </li> <li>Visit the OpenAI API Keys page.  </li> <li>Log in to your account or create a new one.  </li> <li>Click \"Create API key\" and copy the key.</li> </ol>"},{"location":"My_Chat_GPT/#example-configuration-file","title":"Example configuration file:","text":"<pre><code>OPENAI_API_KEY=your-openai-api-key\n</code></pre>"},{"location":"My_Chat_GPT/#przejdz-do-aplikacji","title":"Przejd\u017a do aplikacji","text":""},{"location":"SemanticAudioNotes/","title":"SemanticAudioNotes","text":""},{"location":"SemanticAudioNotes/#overview","title":"Overview","text":"<p>A Streamlit web application that records or uploads audio notes, transcribes them using OpenAI\u2019s Whisper model, embeds the text with OpenAI embeddings, stores the notes in Qdrant for semantic search, and allows editing, downloading, and searching of notes.</p>"},{"location":"SemanticAudioNotes/#main-functionalities","title":"Main functionalities","text":"<ul> <li>Record audio directly from the browser.</li> <li>Upload existing MP3 files.</li> <li>Transcribe audio to text via OpenAI Whisper.</li> <li>Edit transcribed notes in a text area.</li> <li>Save notes with embeddings into a Qdrant vector database.</li> <li>Perform semantic search on stored notes using embeddings.</li> <li>Download notes as MP3 or TXT files.</li> </ul>"},{"location":"SemanticAudioNotes/#technologies-skills","title":"Technologies &amp; skills","text":"<ul> <li>Python  </li> <li>Streamlit  </li> <li>audiorecorder (web recording)  </li> <li>OpenAI API (Whisper, Embeddings)  </li> <li>Qdrant vector database  </li> <li>dotenv for environment variables  </li> <li>hashlib md5 for audio change detection  </li> <li>st_paywall for authentication  </li> <li>Custom modules: <code>my_package.tips</code>, <code>api_key_loader_zmiany</code> </li> </ul>"},{"location":"SemanticAudioNotes/#project-report","title":"Project Report","text":"<ul> <li>Utilizes Streamlit session state to persist audio and text across interactions.</li> <li>MD5 hashing detects changes in recorded audio to reset transcriptions.</li> <li>Caches OpenAI and Qdrant clients for efficient reuse.</li> <li>Ensures the Qdrant collection exists before inserting notes.</li> <li>Supports both real-time recording and file upload workflows.</li> </ul>"},{"location":"SemanticAudioNotes/#sample-photos","title":"Sample photos","text":"\u0141adowanie pliku Transkrypcja"},{"location":"SemanticAudioNotes/#application-usage","title":"Application usage","text":"<ul> <li>Open the Streamlit app in a browser.  </li> <li>Navigate to the \u201cDodaj notatk\u0119\u201d tab to record a new audio note or to the \u201cWczytaj nagranie z pliku mp3\u201d tab to upload an existing MP3.  </li> <li>Click Transkrybuj to convert the audio into text.  </li> <li>Edit the transcribed text if needed, then click Wy\u015blij notatk\u0119 do twojej bazy wektorowej QDRANT to store it.  </li> <li>Use the \u201cWyszukaj notatk\u0119 w chmurze\u201d tab to perform a semantic search by entering a query; relevant notes and similarity scores will appear.</li> </ul>"},{"location":"SemanticAudioNotes/#where-to-get-api-key-and-addresses","title":"Where to get API key and addresses?","text":"<ol> <li>OpenAI API Key (openai_api_key): </li> <li>Visit the OpenAI API Keys page.  </li> <li>Log in to your account or create a new one.  </li> <li> <p>Click \"Create API key\" and copy the key.</p> </li> <li> <p>QuDanta keys and URL: </p> </li> <li>QDRANT_URL: The address of your QuDanta server, e.g., <code>https://your-qdrant-instance.com</code>.  </li> <li>QDRANT_API_KEY: The QuDanta API key (if required).  </li> <li>More details can be found in the QuDanta documentation.</li> </ol>"},{"location":"SemanticAudioNotes/#example-configuration-file","title":"Example configuration file:","text":"<pre><code>OPENAI_API_KEY=your-openai-api-key\nQDRANT_URL=https://your-qdrant-instance.com\nQDRANT_API_KEY=your-qdrant-api-key\nReplace your-openai-api-key, https://your-qdrant-instance.com and your-qdrant-api-key with your own values.\n</code></pre> <p>Go to the application</p>"},{"location":"ds_toolbox/","title":"ds_toolbox","text":""},{"location":"ds_toolbox/#ds-toolbox","title":"DS Toolbox","text":""},{"location":"ds_toolbox/#overview","title":"Overview","text":"<p>A Streamlit data\u2011science toolbox that lets users upload CSV/Excel files, clean missing values and outliers, visualize data with various plots, and train a regression model.</p>"},{"location":"ds_toolbox/#main-functionalities","title":"Main functionalities","text":"<ul> <li>Upload CSV/Excel file via the Streamlit uploader.  </li> <li>Data cleaning: impute missing values (mean, median, mode) and remove IQR outliers.  </li> <li>Interactive visualisation: histogram, boxplot, scatter plot, heatmap using Plotly.  </li> <li>Train a regression model with automatic evaluation metrics.</li> </ul>"},{"location":"ds_toolbox/#technologies-skills","title":"Technologies &amp; skills","text":"<ul> <li>Python  </li> <li>Streamlit  </li> <li>Pandas  </li> <li>Plotly  </li> <li>Scikit\u2011learn  </li> </ul>"},{"location":"ds_toolbox/#project-report","title":"Project Report","text":"<ul> <li>Modular component architecture (data_loader, data_cleaner, visualizer, model_trainer).  </li> <li>Data ingestion and preprocessing pipeline.  </li> <li>Interactive charts rendered with Plotly in Streamlit.  </li> <li>Simple regression training routine returning metrics.</li> </ul>"},{"location":"ds_toolbox/#sample-photos","title":"Sample photos","text":"<p>Application usage - Upload a CSV or Excel file. - Use the \u201cData Cleaning\u201d expander to impute missing values and remove outliers. - Select visualisation type in the \u201cVisualisation\u201d section and view interactive charts. - Choose target column in the \u201cModeling (Regression)\u201d section, run training, and review metrics.</p> <p>Write an HTML anchor tag that: - uses class=\"md-button md-button--primary\" - has the text \u201cGo to the application\u201d - keeps everything else exactly as shown below - only replaces the href value with  from README.md. </p> <p>Go to the application</p>"},{"location":"iris/","title":"Iris","text":""},{"location":"iris/#analiza-danych-eda-irysow-eksploracja-domenowa","title":"Analiza Danych EDA Irys\u00f3w: Eksploracja Domenowa","text":"<p>Zapraszamy do zapoznania si\u0119 z wyj\u0105tkowym projektem autorstwa Rafa\u0142a, kt\u00f3ry przenosi nas w \u015bwiat analizy danych irys\u00f3w za pomoc\u0105 eksploracji domenowej (EDA). W tym projekcie znajdziesz mn\u00f3stwo trafnych wniosk\u00f3w i ciekawych obserwacji, kt\u00f3re rzucaj\u0105 nowe \u015bwiat\u0142o na te pi\u0119kne kwiaty. Przygotuj si\u0119 na fascynuj\u0105c\u0105 podr\u00f3\u017c przez dane, kt\u00f3ra z pewno\u015bci\u0105 wzbogaci Twoj\u0105 wiedz\u0119 i zainspiruje do dalszych bada\u0144.</p> <p>Pobierz Notebook</p> <p></p>"},{"location":"titanic/","title":"Titanic","text":""},{"location":"titanic/#analiza-danych-eda-tytanika-eksploracja-domenowa","title":"Analiza Danych EDA Tytanika: Eksploracja Domenowa","text":"<p>Pobierz Notebook</p> <p></p>"}]}